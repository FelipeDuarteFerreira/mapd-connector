//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


declare enum TDatumType {
  SMALLINT = 0,
  INT = 1,
  BIGINT = 2,
  FLOAT = 3,
  DECIMAL = 4,
  DOUBLE = 5,
  STR = 6,
  TIME = 7,
  TIMESTAMP = 8,
  DATE = 9,
  BOOL = 10,
  INTERVAL_DAY_TIME = 11,
  INTERVAL_YEAR_MONTH = 12,
  POINT = 13,
  LINESTRING = 14,
  POLYGON = 15,
  MULTIPOLYGON = 16,
  TINYINT = 17,
  GEOMETRY = 18,
  GEOGRAPHY = 19,
}

declare enum TEncodingType {
  NONE = 0,
  FIXED = 1,
  RL = 2,
  DIFF = 3,
  DICT = 4,
  SPARSE = 5,
  GEOINT = 6,
}

declare enum TExecuteMode {
  HYBRID = 0,
  GPU = 1,
  CPU = 2,
}

declare enum TDeviceType {
  CPU = 0,
  GPU = 1,
}

declare enum TTableType {
  DELIMITED = 0,
  POLYGON = 1,
}

declare enum TPartitionDetail {
  DEFAULT = 0,
  REPLICATED = 1,
  SHARDED = 2,
  OTHER = 3,
}

declare enum TMergeType {
  UNION = 0,
  REDUCE = 1,
}

declare enum TExpressionRangeType {
  INVALID = 0,
  INTEGER = 1,
  FLOAT = 2,
  DOUBLE = 3,
}

declare enum TDBObjectType {
  AbstractDBObjectType = 0,
  DatabaseDBObjectType = 1,
  TableDBObjectType = 2,
  DashboardDBObjectType = 3,
  ViewDBObjectType = 4,
}

declare class TDatumVal {
  int_val: number;
  real_val: number;
  str_val: string;
  arr_val: TDatum[];

  constructor(args?: { int_val: number; real_val: number; str_val: string; arr_val: TDatum[]; });
}

declare class TDatum {
  val: TDatumVal;
  is_null: boolean;

  constructor(args?: { val: TDatumVal; is_null: boolean; });
}

declare class TStringValue {
  str_val: string;
  is_null: boolean;

  constructor(args?: { str_val: string; is_null: boolean; });
}

declare class TTypeInfo {
  type: TDatumType;
  encoding: TEncodingType;
  nullable: boolean;
  is_array: boolean;
  precision: number;
  scale: number;
  comp_param: number;
  size: number;

  constructor(args?: { type: TDatumType; encoding: TEncodingType; nullable: boolean; is_array: boolean; precision: number; scale: number; comp_param: number; size?: number; });
}

declare class TColumnType {
  col_name: string;
  col_type: TTypeInfo;
  is_reserved_keyword: boolean;
  src_name: string;
  is_system: boolean;
  is_physical: boolean;

  constructor(args?: { col_name: string; col_type: TTypeInfo; is_reserved_keyword: boolean; src_name: string; is_system: boolean; is_physical: boolean; });
}

declare class TRow {
  cols: TDatum[];

  constructor(args?: { cols: TDatum[]; });
}

declare class TColumnData {
  int_col: number[];
  real_col: number[];
  str_col: string[];
  arr_col: TColumn[];

  constructor(args?: { int_col: number[]; real_col: number[]; str_col: string[]; arr_col: TColumn[]; });
}

declare class TColumn {
  data: TColumnData;
  nulls: boolean[];

  constructor(args?: { data: TColumnData; nulls: boolean[]; });
}

declare class TStringRow {
  cols: TStringValue[];

  constructor(args?: { cols: TStringValue[]; });
}

declare class TStepResult {
  serialized_rows: string;
  execution_finished: boolean;
  merge_type: TMergeType;
  sharded: boolean;
  row_desc: TColumnType[];
  node_id: number;

  constructor(args?: { serialized_rows: string; execution_finished: boolean; merge_type: TMergeType; sharded: boolean; row_desc: TColumnType[]; node_id: number; });
}

declare class TRowSet {
  row_desc: TColumnType[];
  rows: TRow[];
  columns: TColumn[];
  is_columnar: boolean;

  constructor(args?: { row_desc: TColumnType[]; rows: TRow[]; columns: TColumn[]; is_columnar: boolean; });
}

declare class TQueryResult {
  row_set: TRowSet;
  execution_time_ms: number;
  total_time_ms: number;
  nonce: string;

  constructor(args?: { row_set: TRowSet; execution_time_ms: number; total_time_ms: number; nonce: string; });
}

declare class TDataFrame {
  sm_handle: string;
  sm_size: number;
  df_handle: string;
  df_size: number;

  constructor(args?: { sm_handle: string; sm_size: number; df_handle: string; df_size: number; });
}

declare class TDBInfo {
  db_name: string;
  db_owner: string;

  constructor(args?: { db_name: string; db_owner: string; });
}

declare class TMapDException extends Thrift.TException {
  error_msg: string;

  constructor(args?: { error_msg: string; });
}

declare class TCopyParams {
  delimiter: string;
  null_str: string;
  has_header: boolean;
  quoted: boolean;
  quote: string;
  escape: string;
  line_delim: string;
  array_delim: string;
  array_begin: string;
  array_end: string;
  threads: number;
  table_type: TTableType;
  s3_access_key: string;
  s3_secret_key: string;
  s3_region: string;
  geo_coords_encoding: TEncodingType;
  geo_coords_comp_param: number;
  geo_coords_type: TDatumType;
  geo_coords_srid: number;
  sanitize_column_names: boolean;

  constructor(args?: { delimiter: string; null_str: string; has_header: boolean; quoted: boolean; quote: string; escape: string; line_delim: string; array_delim: string; array_begin: string; array_end: string; threads: number; table_type: TTableType; s3_access_key: string; s3_secret_key: string; s3_region: string; geo_coords_encoding: TEncodingType; geo_coords_comp_param: number; geo_coords_type: TDatumType; geo_coords_srid: number; sanitize_column_names: boolean; });
}

declare class TCreateParams {
  is_replicated: boolean;

  constructor(args?: { is_replicated: boolean; });
}

declare class TDetectResult {
  row_set: TRowSet;
  copy_params: TCopyParams;

  constructor(args?: { row_set: TRowSet; copy_params: TCopyParams; });
}

declare class TImportStatus {
  elapsed: number;
  rows_completed: number;
  rows_estimated: number;
  rows_rejected: number;

  constructor(args?: { elapsed: number; rows_completed: number; rows_estimated: number; rows_rejected: number; });
}

declare class TFrontendView {
  view_name: string;
  view_state: string;
  image_hash: string;
  update_time: string;
  view_metadata: string;

  constructor(args?: { view_name: string; view_state: string; image_hash: string; update_time: string; view_metadata: string; });
}

declare class TDashboard {
  dashboard_name: string;
  dashboard_state: string;
  image_hash: string;
  update_time: string;
  dashboard_metadata: string;
  dashboard_id: number;
  dashboard_owner: string;
  is_dash_shared: boolean;

  constructor(args?: { dashboard_name: string; dashboard_state: string; image_hash: string; update_time: string; dashboard_metadata: string; dashboard_id: number; dashboard_owner: string; is_dash_shared: boolean; });
}

declare class TServerStatus {
  read_only: boolean;
  version: string;
  rendering_enabled: boolean;
  start_time: number;
  edition: string;
  host_name: string;
  poly_rendering_enabled: boolean;

  constructor(args?: { read_only: boolean; version: string; rendering_enabled: boolean; start_time: number; edition: string; host_name: string; poly_rendering_enabled: boolean; });
}

declare class TPixel {
  x: number;
  y: number;

  constructor(args?: { x: number; y: number; });
}

declare class TPixelTableRowResult {
  pixel: TPixel;
  vega_table_name: string;
  table_id: number;
  row_id: number;
  row_set: TRowSet;
  nonce: string;

  constructor(args?: { pixel: TPixel; vega_table_name: string; table_id: number; row_id: number; row_set: TRowSet; nonce: string; });
}

declare class TRenderResult {
  image: string;
  nonce: string;
  execution_time_ms: number;
  render_time_ms: number;
  total_time_ms: number;
  vega_metadata: string;

  constructor(args?: { image: string; nonce: string; execution_time_ms: number; render_time_ms: number; total_time_ms: number; vega_metadata: string; });
}

declare class TGpuSpecification {
  num_sm: number;
  clock_frequency_kHz: number;
  memory: number;
  compute_capability_major: number;
  compute_capability_minor: number;

  constructor(args?: { num_sm: number; clock_frequency_kHz: number; memory: number; compute_capability_major: number; compute_capability_minor: number; });
}

declare class THardwareInfo {
  num_gpu_hw: number;
  num_cpu_hw: number;
  num_gpu_allocated: number;
  start_gpu: number;
  host_name: string;
  gpu_info: TGpuSpecification[];

  constructor(args?: { num_gpu_hw: number; num_cpu_hw: number; num_gpu_allocated: number; start_gpu: number; host_name: string; gpu_info: TGpuSpecification[]; });
}

declare class TClusterHardwareInfo {
  hardware_info: THardwareInfo[];

  constructor(args?: { hardware_info: THardwareInfo[]; });
}

declare class TMemoryData {
  slab: number;
  start_page: number;
  num_pages: number;
  touch: number;
  chunk_key: number[];
  buffer_epoch: number;
  is_free: boolean;

  constructor(args?: { slab: number; start_page: number; num_pages: number; touch: number; chunk_key: number[]; buffer_epoch: number; is_free: boolean; });
}

declare class TNodeMemoryInfo {
  host_name: string;
  page_size: number;
  max_num_pages: number;
  num_pages_allocated: number;
  is_allocation_capped: boolean;
  node_memory_data: TMemoryData[];

  constructor(args?: { host_name: string; page_size: number; max_num_pages: number; num_pages_allocated: number; is_allocation_capped: boolean; node_memory_data: TMemoryData[]; });
}

declare class TTableMeta {
  table_name: string;
  num_cols: number;
  col_datum_types: TDatumType[];
  is_view: boolean;
  is_replicated: boolean;
  shard_count: number;
  max_rows: number;

  constructor(args?: { table_name: string; num_cols: number; col_datum_types: TDatumType[]; is_view: boolean; is_replicated: boolean; shard_count: number; max_rows: number; });
}

declare class TTableDetails {
  row_desc: TColumnType[];
  fragment_size: number;
  page_size: number;
  max_rows: number;
  view_sql: string;
  shard_count: number;
  key_metainfo: string;
  is_temporary: boolean;
  partition_detail: TPartitionDetail;

  constructor(args?: { row_desc: TColumnType[]; fragment_size: number; page_size: number; max_rows: number; view_sql: string; shard_count: number; key_metainfo: string; is_temporary: boolean; partition_detail: TPartitionDetail; });
}

declare class TColumnRange {
  type: TExpressionRangeType;
  col_id: number;
  table_id: number;
  has_nulls: boolean;
  int_min: number;
  int_max: number;
  bucket: number;
  fp_min: number;
  fp_max: number;

  constructor(args?: { type: TExpressionRangeType; col_id: number; table_id: number; has_nulls: boolean; int_min: number; int_max: number; bucket: number; fp_min: number; fp_max: number; });
}

declare class TDictionaryGeneration {
  dict_id: number;
  entry_count: number;

  constructor(args?: { dict_id: number; entry_count: number; });
}

declare class TTableGeneration {
  table_id: number;
  tuple_count: number;
  start_rowid: number;

  constructor(args?: { table_id: number; tuple_count: number; start_rowid: number; });
}

declare class TPendingQuery {
  id: number;
  column_ranges: TColumnRange[];
  dictionary_generations: TDictionaryGeneration[];
  table_generations: TTableGeneration[];

  constructor(args?: { id: number; column_ranges: TColumnRange[]; dictionary_generations: TDictionaryGeneration[]; table_generations: TTableGeneration[]; });
}

declare class TVarLen {
  payload: string;
  is_null: boolean;

  constructor(args?: { payload: string; is_null: boolean; });
}

declare class TDataBlockPtr {
  fixed_len_data: string;
  var_len_data: TVarLen[];

  constructor(args?: { fixed_len_data?: string; var_len_data?: TVarLen[]; });
}

declare class TInsertData {
  db_id: number;
  table_id: number;
  column_ids: number[];
  data: TDataBlockPtr[];
  num_rows: number;

  constructor(args?: { db_id: number; table_id: number; column_ids: number[]; data: TDataBlockPtr[]; num_rows: number; });
}

declare class TPendingRenderQuery {
  id: number;

  constructor(args?: { id: number; });
}

declare class TRenderParseResult {
  merge_type: TMergeType;
  node_id: number;
  execution_time_ms: number;
  render_time_ms: number;
  total_time_ms: number;

  constructor(args?: { merge_type: TMergeType; node_id: number; execution_time_ms: number; render_time_ms: number; total_time_ms: number; });
}

declare class TRawRenderPassDataResult {
  num_channels: number;
  pixels: string;
  row_ids_A: string;
  row_ids_B: string;
  table_ids: string;
  accum_data: string;

  constructor(args?: { num_channels: number; pixels: string; row_ids_A: string; row_ids_B: string; table_ids: string; accum_data: string; });
}

declare class TRawPixelData {
  width: number;
  height: number;
  render_pass_map: { [k: number]: TRawRenderPassDataResult; };

  constructor(args?: { width: number; height: number; render_pass_map: { [k: number]: TRawRenderPassDataResult; }; });
}

declare class TRenderDatum {
  type: TDatumType;
  cnt: number;
  value: string;

  constructor(args?: { type: TDatumType; cnt: number; value: string; });
}

declare class TRenderStepResult {
  merge_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; };
  raw_pixel_data: TRawPixelData;
  execution_time_ms: number;
  render_time_ms: number;
  total_time_ms: number;

  constructor(args?: { merge_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }; raw_pixel_data: TRawPixelData; execution_time_ms: number; render_time_ms: number; total_time_ms: number; });
}

declare class TDatabasePermissions {
  create_: boolean;
  delete_: boolean;

  constructor(args?: { create_: boolean; delete_: boolean; });
}

declare class TTablePermissions {
  create_: boolean;
  drop_: boolean;
  select_: boolean;
  insert_: boolean;
  update_: boolean;
  delete_: boolean;
  truncate_: boolean;

  constructor(args?: { create_: boolean; drop_: boolean; select_: boolean; insert_: boolean; update_: boolean; delete_: boolean; truncate_: boolean; });
}

declare class TDashboardPermissions {
  create_: boolean;
  delete_: boolean;
  view_: boolean;
  edit_: boolean;

  constructor(args?: { create_: boolean; delete_: boolean; view_: boolean; edit_: boolean; });
}

declare class TViewPermissions {
  create_: boolean;
  drop_: boolean;
  select_: boolean;
  insert_: boolean;
  update_: boolean;
  delete_: boolean;

  constructor(args?: { create_: boolean; drop_: boolean; select_: boolean; insert_: boolean; update_: boolean; delete_: boolean; });
}

declare class TDBObject {
  objectName: string;
  objectType: TDBObjectType;
  privs: boolean[];
  grantee: string;

  constructor(args?: { objectName: string; objectType: TDBObjectType; privs: boolean[]; grantee: string; });
}

declare class TDashboardGrantees {
  name: string;
  is_user: boolean;
  permissions: TDashboardPermissions;

  constructor(args?: { name: string; is_user: boolean; permissions: TDashboardPermissions; });
}

declare class TLicenseInfo {
  claims: string[];

  constructor(args?: { claims: string[]; });
}
