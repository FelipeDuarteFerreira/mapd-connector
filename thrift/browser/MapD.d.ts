//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


declare class MapDClient {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  connect(user: string, passwd: string, dbname: string): string;

  connect(user: string, passwd: string, dbname: string, callback: (data: string)=>void): void;

  disconnect(session: string): void;

  disconnect(session: string, callback: (data: void)=>void): void;

  get_server_status(session: string): TServerStatus;

  get_server_status(session: string, callback: (data: TServerStatus)=>void): void;

  get_status(session: string): TServerStatus[];

  get_status(session: string, callback: (data: TServerStatus[])=>void): void;

  get_hardware_info(session: string): TClusterHardwareInfo;

  get_hardware_info(session: string, callback: (data: TClusterHardwareInfo)=>void): void;

  get_tables(session: string): string[];

  get_tables(session: string, callback: (data: string[])=>void): void;

  get_physical_tables(session: string): string[];

  get_physical_tables(session: string, callback: (data: string[])=>void): void;

  get_views(session: string): string[];

  get_views(session: string, callback: (data: string[])=>void): void;

  get_tables_meta(session: string): TTableMeta[];

  get_tables_meta(session: string, callback: (data: TTableMeta[])=>void): void;

  get_table_details(session: string, table_name: string): TTableDetails;

  get_table_details(session: string, table_name: string, callback: (data: TTableDetails)=>void): void;

  get_internal_table_details(session: string, table_name: string): TTableDetails;

  get_internal_table_details(session: string, table_name: string, callback: (data: TTableDetails)=>void): void;

  get_users(session: string): string[];

  get_users(session: string, callback: (data: string[])=>void): void;

  get_databases(session: string): TDBInfo[];

  get_databases(session: string, callback: (data: TDBInfo[])=>void): void;

  get_version(): string;

  get_version(callback: (data: string)=>void): void;

  start_heap_profile(session: string): void;

  start_heap_profile(session: string, callback: (data: void)=>void): void;

  stop_heap_profile(session: string): void;

  stop_heap_profile(session: string, callback: (data: void)=>void): void;

  get_heap_profile(session: string): string;

  get_heap_profile(session: string, callback: (data: string)=>void): void;

  get_memory(session: string, memory_level: string): TNodeMemoryInfo[];

  get_memory(session: string, memory_level: string, callback: (data: TNodeMemoryInfo[])=>void): void;

  clear_cpu_memory(session: string): void;

  clear_cpu_memory(session: string, callback: (data: void)=>void): void;

  clear_gpu_memory(session: string): void;

  clear_gpu_memory(session: string, callback: (data: void)=>void): void;

  set_table_epoch(session: string, db_id: number, table_id: number, new_epoch: number): void;

  set_table_epoch(session: string, db_id: number, table_id: number, new_epoch: number, callback: (data: void)=>void): void;

  set_table_epoch_by_name(session: string, table_name: string, new_epoch: number): void;

  set_table_epoch_by_name(session: string, table_name: string, new_epoch: number, callback: (data: void)=>void): void;

  get_table_epoch(session: string, db_id: number, table_id: number): number;

  get_table_epoch(session: string, db_id: number, table_id: number, callback: (data: number)=>void): void;

  get_table_epoch_by_name(session: string, table_name: string): number;

  get_table_epoch_by_name(session: string, table_name: string, callback: (data: number)=>void): void;

  sql_execute(session: string, query: string, column_format: boolean, nonce: string, first_n: number, at_most_n: number): TQueryResult;

  sql_execute(session: string, query: string, column_format: boolean, nonce: string, first_n: number, at_most_n: number, callback: (data: TQueryResult)=>void): void;

  sql_execute_df(session: string, query: string, device_type: TDeviceType, device_id: number, first_n: number): TDataFrame;

  sql_execute_df(session: string, query: string, device_type: TDeviceType, device_id: number, first_n: number, callback: (data: TDataFrame)=>void): void;

  sql_execute_gdf(session: string, query: string, device_id: number, first_n: number): TDataFrame;

  sql_execute_gdf(session: string, query: string, device_id: number, first_n: number, callback: (data: TDataFrame)=>void): void;

  deallocate_df(session: string, df: TDataFrame, device_type: TDeviceType, device_id: number): void;

  deallocate_df(session: string, df: TDataFrame, device_type: TDeviceType, device_id: number, callback: (data: void)=>void): void;

  interrupt(session: string): void;

  interrupt(session: string, callback: (data: void)=>void): void;

  sql_validate(session: string, query: string): { [k: string]: TColumnType; };

  sql_validate(session: string, query: string, callback: (data: { [k: string]: TColumnType; })=>void): void;

  get_completion_hints(session: string, sql: string, cursor: number): TCompletionHint[];

  get_completion_hints(session: string, sql: string, cursor: number, callback: (data: TCompletionHint[])=>void): void;

  set_execution_mode(session: string, mode: TExecuteMode): void;

  set_execution_mode(session: string, mode: TExecuteMode, callback: (data: void)=>void): void;

  render_vega(session: string, widget_id: number, vega_json: string, compression_level: number, nonce: string): TRenderResult;

  render_vega(session: string, widget_id: number, vega_json: string, compression_level: number, nonce: string, callback: (data: TRenderResult)=>void): void;

  get_result_row_for_pixel(session: string, widget_id: number, pixel: TPixel, table_col_names: { [k: string]: string[]; }, column_format: boolean, pixelRadius: number, nonce: string): TPixelTableRowResult;

  get_result_row_for_pixel(session: string, widget_id: number, pixel: TPixel, table_col_names: { [k: string]: string[]; }, column_format: boolean, pixelRadius: number, nonce: string, callback: (data: TPixelTableRowResult)=>void): void;

  get_frontend_view(session: string, view_name: string): TFrontendView;

  get_frontend_view(session: string, view_name: string, callback: (data: TFrontendView)=>void): void;

  get_frontend_views(session: string): TFrontendView[];

  get_frontend_views(session: string, callback: (data: TFrontendView[])=>void): void;

  create_frontend_view(session: string, view_name: string, view_state: string, image_hash: string, view_metadata: string): void;

  create_frontend_view(session: string, view_name: string, view_state: string, image_hash: string, view_metadata: string, callback: (data: void)=>void): void;

  delete_frontend_view(session: string, view_name: string): void;

  delete_frontend_view(session: string, view_name: string, callback: (data: void)=>void): void;

  get_dashboard(session: string, dashboard_id: number): TDashboard;

  get_dashboard(session: string, dashboard_id: number, callback: (data: TDashboard)=>void): void;

  get_dashboards(session: string): TDashboard[];

  get_dashboards(session: string, callback: (data: TDashboard[])=>void): void;

  create_dashboard(session: string, dashboard_name: string, dashboard_state: string, image_hash: string, dashboard_metadata: string): number;

  create_dashboard(session: string, dashboard_name: string, dashboard_state: string, image_hash: string, dashboard_metadata: string, callback: (data: number)=>void): void;

  replace_dashboard(session: string, dashboard_id: number, dashboard_name: string, dashboard_owner: string, dashboard_state: string, image_hash: string, dashboard_metadata: string): void;

  replace_dashboard(session: string, dashboard_id: number, dashboard_name: string, dashboard_owner: string, dashboard_state: string, image_hash: string, dashboard_metadata: string, callback: (data: void)=>void): void;

  delete_dashboard(session: string, dashboard_id: number): void;

  delete_dashboard(session: string, dashboard_id: number, callback: (data: void)=>void): void;

  share_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions): void;

  share_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions, callback: (data: void)=>void): void;

  unshare_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions): void;

  unshare_dashboard(session: string, dashboard_id: number, groups: string[], objects: string[], permissions: TDashboardPermissions, callback: (data: void)=>void): void;

  get_dashboard_grantees(session: string, dashboard_id: number): TDashboardGrantees[];

  get_dashboard_grantees(session: string, dashboard_id: number, callback: (data: TDashboardGrantees[])=>void): void;

  get_link_view(session: string, link: string): TFrontendView;

  get_link_view(session: string, link: string, callback: (data: TFrontendView)=>void): void;

  create_link(session: string, view_state: string, view_metadata: string): string;

  create_link(session: string, view_state: string, view_metadata: string, callback: (data: string)=>void): void;

  load_table_binary(session: string, table_name: string, rows: TRow[]): void;

  load_table_binary(session: string, table_name: string, rows: TRow[], callback: (data: void)=>void): void;

  load_table_binary_columnar(session: string, table_name: string, cols: TColumn[]): void;

  load_table_binary_columnar(session: string, table_name: string, cols: TColumn[], callback: (data: void)=>void): void;

  load_table_binary_arrow(session: string, table_name: string, arrow_stream: string): void;

  load_table_binary_arrow(session: string, table_name: string, arrow_stream: string, callback: (data: void)=>void): void;

  load_table(session: string, table_name: string, rows: TStringRow[]): void;

  load_table(session: string, table_name: string, rows: TStringRow[], callback: (data: void)=>void): void;

  detect_column_types(session: string, file_name: string, copy_params: TCopyParams): TDetectResult;

  detect_column_types(session: string, file_name: string, copy_params: TCopyParams, callback: (data: TDetectResult)=>void): void;

  create_table(session: string, table_name: string, row_desc: TColumnType[], table_type: TTableType, create_params: TCreateParams): void;

  create_table(session: string, table_name: string, row_desc: TColumnType[], table_type: TTableType, create_params: TCreateParams, callback: (data: void)=>void): void;

  import_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams): void;

  import_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, callback: (data: void)=>void): void;

  import_geo_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, row_desc: TColumnType[]): void;

  import_geo_table(session: string, table_name: string, file_name: string, copy_params: TCopyParams, row_desc: TColumnType[], callback: (data: void)=>void): void;

  import_table_status(session: string, import_id: string): TImportStatus;

  import_table_status(session: string, import_id: string, callback: (data: TImportStatus)=>void): void;

  get_first_geo_file_in_archive(session: string, archive_path: string, copy_params: TCopyParams): string;

  get_first_geo_file_in_archive(session: string, archive_path: string, copy_params: TCopyParams, callback: (data: string)=>void): void;

  get_all_files_in_archive(session: string, archive_path: string, copy_params: TCopyParams): string[];

  get_all_files_in_archive(session: string, archive_path: string, copy_params: TCopyParams, callback: (data: string[])=>void): void;

  start_query(session: string, query_ra: string, just_explain: boolean): TPendingQuery;

  start_query(session: string, query_ra: string, just_explain: boolean, callback: (data: TPendingQuery)=>void): void;

  execute_first_step(pending_query: TPendingQuery): TStepResult;

  execute_first_step(pending_query: TPendingQuery, callback: (data: TStepResult)=>void): void;

  broadcast_serialized_rows(serialized_rows: string, row_desc: TColumnType[], query_id: number): void;

  broadcast_serialized_rows(serialized_rows: string, row_desc: TColumnType[], query_id: number, callback: (data: void)=>void): void;

  start_render_query(session: string, widget_id: number, node_idx: number, vega_json: string): TPendingRenderQuery;

  start_render_query(session: string, widget_id: number, node_idx: number, vega_json: string, callback: (data: TPendingRenderQuery)=>void): void;

  execute_next_render_step(pending_render: TPendingRenderQuery, merged_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }): TRenderStepResult;

  execute_next_render_step(pending_render: TPendingRenderQuery, merged_data: { [k: string]: { [k: string]: { [k: string]: { [k: string]: TRenderDatum[]; }; }; }; }, callback: (data: TRenderStepResult)=>void): void;

  insert_data(session: string, insert_data: TInsertData): void;

  insert_data(session: string, insert_data: TInsertData, callback: (data: void)=>void): void;

  checkpoint(session: string, db_id: number, table_id: number): void;

  checkpoint(session: string, db_id: number, table_id: number, callback: (data: void)=>void): void;

  get_table_descriptor(session: string, table_name: string): { [k: string]: TColumnType; };

  get_table_descriptor(session: string, table_name: string, callback: (data: { [k: string]: TColumnType; })=>void): void;

  get_row_descriptor(session: string, table_name: string): TColumnType[];

  get_row_descriptor(session: string, table_name: string, callback: (data: TColumnType[])=>void): void;

  get_roles(session: string): string[];

  get_roles(session: string, callback: (data: string[])=>void): void;

  get_db_objects_for_grantee(session: string, roleName: string): TDBObject[];

  get_db_objects_for_grantee(session: string, roleName: string, callback: (data: TDBObject[])=>void): void;

  get_db_object_privs(session: string, objectName: string, type: TDBObjectType): TDBObject[];

  get_db_object_privs(session: string, objectName: string, type: TDBObjectType, callback: (data: TDBObject[])=>void): void;

  get_all_roles_for_user(session: string, userName: string): string[];

  get_all_roles_for_user(session: string, userName: string, callback: (data: string[])=>void): void;

  set_license_key(session: string, key: string, nonce: string): TLicenseInfo;

  set_license_key(session: string, key: string, nonce: string, callback: (data: TLicenseInfo)=>void): void;

  get_license_claims(session: string, nonce: string): TLicenseInfo;

  get_license_claims(session: string, nonce: string, callback: (data: TLicenseInfo)=>void): void;
}
